package main

import (
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"strings"
)

var types = []string{
	"Binary		: Left Expr, Operator Token, Right Expr",
	"Grouping : Expression Expr",
	"Literal  :	Value interface{}",
	"Unary    : Operator Token, Right Expr",
}

const exprBaseName = "Expr"

const exprInterfaceCode = `type Expr interface {
  Accept(visitor Visitor) interface{}
}`

const filePath = "../expr.go"
const fileMode = 0660

func main() {
	file, err := os.OpenFile(filePath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, fileMode)

	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Fprint(file, "//DO NOT EDIT THIS FILE\n")
	fmt.Fprint(file, "//IT WAS GENERATED BY CODE UNDER TOOLS FOLDER\n\n")
	fmt.Fprint(file, "package main\n\n")

	defineVisitorInterface(file, exprBaseName, types)

	fmt.Fprintf(file, "%s\n\n", exprInterfaceCode)

	for _, astType := range types {

		parts := strings.Split(astType, ":")

		className := strings.TrimSpace(parts[0])
		fields := strings.Split(strings.TrimSpace(parts[1]), ",")

		defineType(file, exprBaseName, className, fields)
	}

	file.Close()
	formatCodeFile()
}

func defineVisitorInterface(file *os.File, baseName string, types []string) {
	fmt.Fprint(file, "type Visitor interface {\n")

	for _, astType := range types {
		fullClassName := strings.TrimSpace(strings.Split(astType, ":")[0]) + baseName

		fmt.Fprintf(file, "  Visit%s(expr %s) interface{}\n", fullClassName, fullClassName)
	}

	fmt.Fprint(file, "}\n\n")
}

func defineType(file *os.File, baseName string, className string, fields []string) {
	fmt.Fprintf(file, "type %s%s struct {\n", className, baseName)

	for _, field := range fields {
		parts := strings.Split(strings.TrimSpace(field), " ")

		fieldName := strings.TrimSpace(parts[0])
		typeName := strings.TrimSpace(parts[1])

		fmt.Fprintf(file, "  %s %s\n", fieldName, typeName)
	}

	fmt.Fprint(file, "}\n\n")

	fmt.Fprintf(file, "func (expr %s%s) Accept(v Visitor) interface{} {\n", className, baseName)
	fmt.Fprintf(file, "  return v.Visit%s%s(expr)\n", className, baseName)
	fmt.Fprint(file, "}\n\n")
}

func formatCodeFile() {
	code, err := ioutil.ReadFile(filePath)
	if err != nil {
		fmt.Println(err)
		return
	}

	formatCode, err := format.Source(code)
	if err != nil {
		fmt.Println(err)
		return
	}

	err = ioutil.WriteFile(filePath, formatCode, fileMode)
	if err != nil {
		fmt.Println(err)
		return
	}
}
