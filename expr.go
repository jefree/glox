//DO NOT EDIT THIS FILE
//IT WAS GENERATED BY CODE UNDER TOOLS FOLDER

package main

type Visitor interface {
	visitBinaryExpr(expr BinaryExpr)
	visitGroupingExpr(expr GroupingExpr)
	visitLiteralExpr(expr LiteralExpr)
	visitUnaryExpr(expr UnaryExpr)
}

type Expr interface {
	accept(visitor Visitor)
}

type BinaryExpr struct {
	left     Expr
	operator Token
	right    Expr
}

func (expr BinaryExpr) accept(v Visitor) {
	v.visitBinaryExpr(expr)
}

type GroupingExpr struct {
	expression Expr
}

func (expr GroupingExpr) accept(v Visitor) {
	v.visitGroupingExpr(expr)
}

type LiteralExpr struct {
	value struct{}
}

func (expr LiteralExpr) accept(v Visitor) {
	v.visitLiteralExpr(expr)
}

type UnaryExpr struct {
	operator Token
	right    Expr
}

func (expr UnaryExpr) accept(v Visitor) {
	v.visitUnaryExpr(expr)
}
