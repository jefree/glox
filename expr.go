//DO NOT EDIT THIS FILE
//IT WAS GENERATED BY CODE UNDER TOOLS FOLDER

package main

type Visitor interface {
	visitBinaryExpr(expr BinaryExpr) interface{}
	visitGroupingExpr(expr GroupingExpr) interface{}
	visitLiteralExpr(expr LiteralExpr) interface{}
	visitUnaryExpr(expr UnaryExpr) interface{}
}

type Expr interface {
	accept(visitor Visitor) interface{}
}

type BinaryExpr struct {
	left     Expr
	operator Token
	right    Expr
}

func (expr BinaryExpr) accept(v Visitor) interface{} {
	return v.visitBinaryExpr(expr)
}

type GroupingExpr struct {
	expression Expr
}

func (expr GroupingExpr) accept(v Visitor) interface{} {
	return v.visitGroupingExpr(expr)
}

type LiteralExpr struct {
	value struct{}
}

func (expr LiteralExpr) accept(v Visitor) interface{} {
	return v.visitLiteralExpr(expr)
}

type UnaryExpr struct {
	operator Token
	right    Expr
}

func (expr UnaryExpr) accept(v Visitor) interface{} {
	return v.visitUnaryExpr(expr)
}
